# Install casks
function installcask() {
    brew cask install "${@}" 2> /dev/null
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
			echo "Common Name:"
			echo # newline
			echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
			echo # newline
			echo "Subject Alternative Name(s):"
			echo # newline
			echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
				| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
			return 0
	else
		echo "ERROR: Certificate not found.";
		return 1
	fi
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}


# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}
function sshid () {
  ip=$(aws ec2 describe-instances --instance-id "$1"| python -c \
  'import sys, json; print json.load(sys.stdin)["Reservations"][0]\
  ["Instances"][0]["PrivateIpAddress"]')
        shift
        \ssh "$ip" "$@"
}

# https://gist.github.com/thalweg/c5c127f97548512ba14b
# Chef conveniences
function cdbag(){
  if (( $# != 1 )); then
      echo "You must specify a Chef data bag" >&2
      return 1
    fi
    if (( $# != 2 )); then
      echo "You must specify a Chef data bag item" >&2
      return 1
    fi
  local dbname="$1"
  local dbitem="$2"
  $KNIFE data bag show $dbname $dbitem -Fjson
}
function cedbag(){
  if (( $# < 1 )); then
      echo "You must specify a Chef data bag" >&2
      return 1
    fi
    if (( $# != 2 )); then
      echo "You must specify a Chef data bag item" >&2
      return 1
    fi
  local dbname="$1"
  local dbitem="$2"
  $KNIFE data bag show $dbname $dbitem -Fjson --secret-file $CHEF_SECRET
}
function putenv(){
  if (( $# < 1 )); then
    echo "You must specify at least one Chef environment" >&2
    return 1
  fi
  while (( $# )); do
    $MASTERCHEF_DIR/putenv.sh "$1"
    shift
  done
}
function putrole(){
  if (( $# < 1 )); then
    echo "You must specify at least one Chef role" >&2
    return 1
  fi
  while (( $# )); do
    $MASTERCHEF_DIR/putrole.sh "$1"
    shift
  done
}
function putcb(){
  local origin="$PWD"
  while [ ! -f ./metadata.rb ]; do
    \cd ..
    if [[ "$PWD" == "/" ]]; then
      \cd "$origin"
      return
    fi
  done
  cookbook="$(basename "$PWD")"
  \cd "$origin"
  $KNIFE spork upload "$cookbook"
}
function bumpcb(){
  local origin="$PWD"
  while [ ! -f ./metadata.rb ]; do
    cd ..
    if [[ "$PWD" == "/" ]]; then
      cd "$origin"
      return
    fi
  done
  cookbook="$(basename "$PWD")"
  cd "$origin"
  $KNIFE spork bump "$cookbook"
}
function testcb(){
  local origin="$PWD"
  while [ ! -f ./metadata.rb ]; do
    cd ..
    if [[ "$PWD" == "/" ]]; then
      cd "$origin"
      return
    fi
  done
  cookbook="$(basename "$PWD")"
  cd "$origin"
  $KNIFE cookbook test "$cookbook"
}
function promotecb(){
  if (( $# != 1 )); then
    echo "You must specify a Chef environment" >&2
    return 1
  fi
  local origin="$PWD"
  local environment="$1"
  while [ ! -f ./metadata.rb ]; do
    cd ..
    if [[ "$PWD" == "/" ]]; then
      cd "$origin"
      return
    fi
  done
  cookbook="$(basename "$PWD")"
  cd "$origin"
  $KNIFE spork promote "$environment" "$cookbook"
}
function nodename(){
  if (( $# != 1 )); then
    echo "You must specify a Hostname" >&2
    return 1
  fi
  node="$($KNIFE status "$1*" | cut -f 2 -d ',' |tr -d ' ')"
  if [ -z "$node" ]; then
  	echo "No node found with that hostname"
  else
  	echo "Found $node, passing to pastebuffer"
  	echo "$node" | pbcopy
  fi
}
alias kssh='$KNIFE ssh -a fqdn -C 10'
